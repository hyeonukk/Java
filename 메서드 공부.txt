메서드 :
메서드란 코드를 관리하기 쉽고 재사용하기 쉽도록 기능 단위로 묶어 놓는 문법을 말한다. 메서드명과 변수 선언을 말하는
메서드 시그니처와 메서드 블록을 뜻하는 메서드 몸체로 구성되어 있다.

메서드 선언 문법 [리턴값의 타입] 함수명(파라미터 선언,){명령어들}
	'리턴값의 타입 : 함수 블록에 들어있는 명령어를 수행 완료한 후 그 결과로 놓이는 값의 타입
	'파라미터 선언 : 함수 블록을 실행할 때 외부로부터 받은 값을 저장할 변수 선언
메서드 사용 문법 [리턴값을 받을 변수] =메서드명(argument)
argument : 메서드 블록에 들어 있는 명령을 실행하기 위해 넘겨주는 값, 즉 파라미터 변수에 넘겨주는 값을 말한다. 
파라미터 변수의 타입과 개수와 순서에 맞게 값을 넘겨주어야 한다. 그렇지 않으면 컴파일 오류가 발생한다.

리턴값을 받을 변수: 매서드 블록을 실행한 후 리턴되는 값을 받을 변수이다. 매서드가 값을 리턴할 때 선언하지만, 메서드가 값을 리턴한다 하더라도 받고싶지 않으면 변수를 선언하지 않아도 된다. 이때 리턴되는 값은 버려진다. 값을 리턴하지 않는 메서드에 대해 변수를 선언하면 컴파일 오류가 발생한다.
아규먼트와 파라미터
아규먼트(argument): 메서드를 호출할 때 넘겨주는 값
파라미터(parameter): 아규먼트를 받는 변수

메서드의 종류 
클래스 메서드 vs 인스턴스 메서드

클래스 메서드(정적메서드 ) 
	클래스에 소속되어 있고 static이 앞에 붙는다.
	로드된 클래스를 바탕으로 호출하는 메서드
	클래스명.메소드(argument);
	 클래스 메소드는 인스턴스 멤버에 접근할 수없다.
 * 클래스 하위에 인스턴스가 있기 때문에 클래스는 인스턴스멤버에 접근할 수없다.
인스턴스 메서드
	인스턴스에 대해서 사용할 수있다.
	static이 붙지 않는다.
	만들어진 인스턴스를 바탕으로 호출하는 메서드다
	인스턴스 메소드는 클래스 멤버에 접근 할 수있다.
	
리턴타입은 반드시 한개만 가능하다.
만약 여러개의 리턴타입을 받고 싶으면 배열에 담거나, 객체에 담아야한다.
리턴명령을 실행하면 메서드 실행을 종료함
메서드를 리턴한 후에 작업을 수행할 수 없음.
메서드가 반드시 리턴값을 변수에 받아야 하는것은 아니고, 리턴값을 버려도 된다.



객체 : 객체지향 프로그램의 대상, 생성된 인스턴스
클래스 : 객체를 프로그래밍하기 위해 코드로 만든 상태
인스턴스 : 클래스가 메모리에 생성된 상태
멤버변수 : 클래스의 속성, 특성
메서드 : 멤버변수를 이용하여 클래스의 기능 구현
참조변수 : 메모리에 생성된 인스턴스를 가리키는 변수
참조값 : 생성된 인스턴스의 메모리 주소값 
생성자 : 객체를 생성하고, 초기화를 도와준다. 

객체생성, 메서드, 멤버변수, 매개변수, 생성자

public static void method(){
return
} 
//메서드 정의
public static void method(매개변수-parameter) {
for~~~~~
 }  
 
 System.out.println{
 method(인자-argument  );
 }
 
 메서드 : 메인문안에서 출력될것을 만드는것 
 void는 메소드이름 앞에 붙으면 return값이 존재하지 않 는다.
 
 